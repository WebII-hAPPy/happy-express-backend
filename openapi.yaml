openapi: "3.0.0"
info:
  description: "API for the Web-Engineering II project hAPPy"
  version: "0"
  title: "hAPPy"
servers:
  - url: "localhost"
tags:
  - name: "face"
  - name: "user"
  - name: "statistic"
  - name: "image"
paths:
  "/register":
    post:
      tags:
        - register
      operationId: "register"
      responses:
        201:
          description: "Registration successful."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: "Username and password are required."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: "E-Mail is already registered."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/login":
    post:
      tags:
        - login
      operationId: "login"
      responses:
        200:
          description: "Login successful."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: "Username and password are required"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: "E-Mail or password invalid."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      tags:
        - "verify"
      description: "Verifies a user account"
      operationId: "verify-account"
      responses:
        200:
          description: "User successfully activated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        404:
          description: "Activation link invalid or expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      parameters:
        - in: path
          name: "hash"
          description: "validation hash"
          required: true
          schema:
            type: string
  "/api/image":
    post:
      tags:
        - "image-upload"
      description: "upload image for azure analysis"
      operationId: "image-upload"
      responses:
        201:
          description: "Analysis complete"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Analysis"
        400:
          description: "Could not process file"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        406:
          description: "No face recognized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        415:
          description: "Mediatype not supported"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/statistic/{id}":
    get:
      tags:
        - statistic
      operationId: "get-statistic"
      responses:
        200:
          description: "Generated statistics"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistic"
        500:
          description: "An error occurred"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      parameters:
        - in: path
          name: "id"
          description: "The user id."
          required: true
          schema:
            type: number
components:
  schemas:
    User:
      properties:
        id:
          type: "number"
          format: "integer"
        name:
          type: "string"
        e-mail:
          type: "string"
        password:
          type: "string"
        salt:
          type: "string"
        analysis-count:
          type: "integer"
    Analysis:
      properties:
        id:
          type: "number"
          format: "integer"
        date:
          type: "string"
          format: "date"
        emotion:
          $ref: "#/components/schemas/Emotion"
        smile:
          type: "number"
          format: "double"
        accessories:
          type: "array"
          items:
            $ref: "#/components/schemas/Accessory"
        makeup:
          $ref: "#/components/schemas/MakeUp"
        glasses:
          type: "string"
        gender:
          type: "string"
        age:
          type: "integer"
        facialHair:
          $ref: "#/components/schemas/FacialHair"
        hair:
          $ref: "#/components/schemas/Hair"
    Emotion:
      properties:
        id:
          type: "number"
          format: "integer"
        anger:
          type: "number"
          format: "double"
        contempt:
          type: "number"
          format: "double"
        disgust:
          type: "number"
          format: "double"
        fear:
          type: "number"
          format: "double"
        happiness:
          type: "number"
          format: "double"
        neutral:
          type: "number"
          format: "double"
        sadness:
          type: "number"
          format: "double"
        surprise:
          type: "number"
          format: "double"
    Statistic:
      type: object
      properties:
        id:
          type: "number"
          format: "integer"
    Accessory:
      properties:
        id:
          type: "number"
          format: "integer"
        type:
          type: "string"
        confidence:
          type: "number"
          format: "double"
    MakeUp:
      properties:
        id:
          type: "number"
          format: "integer"
        eyeMakeup:
          type: "boolean"
        lipMakeup:
          type: "boolean"
    FacialHair:
      properties:
        id:
          type: "number"
          format: "integer"
        moustache:
          type: "number"
          format: "double"
        beard:
          type: "number"
          format: "double"
        sideburns:
          type: "number"
          format: "double"
    Hair:
      properties:
        bald:
          type: "number"
          format: "double"
        invisible:
          type: "boolean"
        hairColor:
          type: "array"
          items:
            $ref: "#/components/schemas/HairColor"
    HairColor:
      properties:
        color:
          type: "string"
        confidence:
          type: "number"
          format: "double"
    Error:
      properties:
        message:
          type: "string"
    Response:
      properties:
        message:
          type: "string"
        data:
          type: "object"
